import { writable} from 'svelte/store';
import type { Node, Edge } from '@xyflow/svelte';

export const nodes = writable<Node[]>([]);
export const edges = writable<Edge[]>([]);

export const nodes_det = writable<Node[]>([]);
export const edges_det = writable<Edge[]>([]);

export const nodes_col = writable<Node[]>([]);
export const edges_col = writable<Edge[]>([]);

export const nodes_min = writable<Node[]>([]);
export const edges_min = writable<Edge[]>([]);

export const detailInfo = writable(null);
export const isSwitchOn = writable(false);

// Store for tracking the visibility of the bubble
export const showBubble = writable<boolean>(false);

export function showDetails(data: any) {
    showBubble.set(true);
    detailInfo.set(data);
}

export function handleKeyDown (event: KeyboardEvent, data: any) {
    // Trigger showDetails on Enter or Space key press
    if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        showDetails(data);
    }
}


export const changedPar = writable(new Set<string>());
export const changedUnit = writable(new Set<string>());
export const changedTempRes = writable(new Set<string>());
export const changedSpatRes = writable(new Set<string>());
export const changedScenario = writable(new Set<string>());
export const changedFormat = writable(new Set<string>());
export const changedSize = writable(new Set<string>());
export const changedGlobMod = writable(new Set<string>());
export const changedRegMod = writable(new Set<string>());
export const changedBounds = writable(new Set<string>());

// Writable stores for the label states
export const wasDerivedFrom_lb = writable("wasDerivedFrom");
export const wasInformedBy_lb = writable("wasInformedBy");
export const wasAttributedTo_lb = writable("wasAttributedTo");
export const actedOnBehalfOf_lb = writable("actedOnBehalfOf");
export const wasAssociatedWith_lb = writable("wasAssociatedWith");
export const wasGeneratedBy_lb = writable("wasGeneratedBy");
export const used_lb = writable("used");
export const hadMember_lb = writable("hadMember");

// Function to update labels based on switch state
export const updateLabels = (isSwitchOn: boolean) => {
    if (isSwitchOn) {
        wasDerivedFrom_lb.set("wasDerivedFrom");
        wasInformedBy_lb.set("wasInformedBy");
        wasAttributedTo_lb.set("wasAttributedTo");
        actedOnBehalfOf_lb.set("actedOnBehalfOf");
        wasAssociatedWith_lb.set("wasAssociatedWith");
        wasGeneratedBy_lb.set("wasGeneratedBy");
        used_lb.set("used");
        hadMember_lb.set("hadMember")
    } else {
        wasDerivedFrom_lb.set("derived from");
        wasInformedBy_lb.set("followed by");
        wasAttributedTo_lb.set("resp. person");
        actedOnBehalfOf_lb.set("works for organization");
        wasAssociatedWith_lb.set("part of software");
        wasGeneratedBy_lb.set("generated by");
        used_lb.set("used dataset");
        hadMember_lb.set("part of collection")
    }
};