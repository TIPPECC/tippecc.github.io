{"version":3,"file":"D03iIlqM.js","sources":["../../../../../../node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/dev.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/exports/internal/index.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../node_modules/.pnpm/devalue@5.1.1/node_modules/devalue/src/base64.js","../../../../../../node_modules/.pnpm/devalue@5.1.1/node_modules/devalue/src/constants.js","../../../../../../node_modules/.pnpm/devalue@5.1.1/node_modules/devalue/src/parse.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/utils/error.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/runtime/pathname.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.25.2_@sveltejs+vite-plugin-svelte@3.1.2_svelte@4.2.20_vite@5.4.19/node_modules/@sveltejs/kit/src/runtime/client/client.js"],"sourcesContent":["import {\n\tcustom_event,\n\tappend,\n\tappend_hydration,\n\tinsert,\n\tinsert_hydration,\n\tdetach,\n\tlisten,\n\tattr\n} from './dom.js';\nimport { SvelteComponent } from './Component.js';\nimport { is_void } from '../../shared/utils/names.js';\nimport { VERSION } from '../../shared/version.js';\nimport { contenteditable_truthy_values } from './utils.js';\nimport { ensure_array_like } from './each.js';\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @returns {void}\n */\nexport function dispatch_dev(type, detail) {\n\tdocument.dispatchEvent(custom_event(type, { version: VERSION, ...detail }, { bubbles: true }));\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append_dev(target, node) {\n\tdispatch_dev('SvelteDOMInsert', { target, node });\n\tappend(target, node);\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append_hydration_dev(target, node) {\n\tdispatch_dev('SvelteDOMInsert', { target, node });\n\tappend_hydration(target, node);\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert_dev(target, node, anchor) {\n\tdispatch_dev('SvelteDOMInsert', { target, node, anchor });\n\tinsert(target, node, anchor);\n}\n\n/** @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert_hydration_dev(target, node, anchor) {\n\tdispatch_dev('SvelteDOMInsert', { target, node, anchor });\n\tinsert_hydration(target, node, anchor);\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach_dev(node) {\n\tdispatch_dev('SvelteDOMRemove', { node });\n\tdetach(node);\n}\n\n/**\n * @param {Node} before\n * @param {Node} after\n * @returns {void}\n */\nexport function detach_between_dev(before, after) {\n\twhile (before.nextSibling && before.nextSibling !== after) {\n\t\tdetach_dev(before.nextSibling);\n\t}\n}\n\n/**\n * @param {Node} after\n * @returns {void}\n */\nexport function detach_before_dev(after) {\n\twhile (after.previousSibling) {\n\t\tdetach_dev(after.previousSibling);\n\t}\n}\n\n/**\n * @param {Node} before\n * @returns {void}\n */\nexport function detach_after_dev(before) {\n\twhile (before.nextSibling) {\n\t\tdetach_dev(before.nextSibling);\n\t}\n}\n\n/**\n * @param {Node} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @param {boolean} [has_prevent_default]\n * @param {boolean} [has_stop_propagation]\n * @param {boolean} [has_stop_immediate_propagation]\n * @returns {() => void}\n */\nexport function listen_dev(\n\tnode,\n\tevent,\n\thandler,\n\toptions,\n\thas_prevent_default,\n\thas_stop_propagation,\n\thas_stop_immediate_propagation\n) {\n\tconst modifiers =\n\t\toptions === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n\tif (has_prevent_default) modifiers.push('preventDefault');\n\tif (has_stop_propagation) modifiers.push('stopPropagation');\n\tif (has_stop_immediate_propagation) modifiers.push('stopImmediatePropagation');\n\tdispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n\tconst dispose = listen(node, event, handler, options);\n\treturn () => {\n\t\tdispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n\t\tdispose();\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr_dev(node, attribute, value) {\n\tattr(node, attribute, value);\n\tif (value == null) dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n\telse dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\n\n/**\n * @param {Element} node\n * @param {string} property\n * @param {any} [value]\n * @returns {void}\n */\nexport function prop_dev(node, property, value) {\n\tnode[property] = value;\n\tdispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\n\n/**\n * @param {HTMLElement} node\n * @param {string} property\n * @param {any} [value]\n * @returns {void}\n */\nexport function dataset_dev(node, property, value) {\n\tnode.dataset[property] = value;\n\tdispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_dev(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\tdispatch_dev('SvelteDOMSetData', { node: text, data });\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable_dev(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\tdispatch_dev('SvelteDOMSetData', { node: text, data });\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable_dev(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable_dev(text, data);\n\t} else {\n\t\tset_data_dev(text, data);\n\t}\n}\n\nexport function ensure_array_like_dev(arg) {\n\tif (\n\t\ttypeof arg !== 'string' &&\n\t\t!(arg && typeof arg === 'object' && 'length' in arg) &&\n\t\t!(typeof Symbol === 'function' && arg && Symbol.iterator in arg)\n\t) {\n\t\tthrow new Error('{#each} only works with iterable values.');\n\t}\n\treturn ensure_array_like(arg);\n}\n\n/**\n * @returns {void} */\nexport function validate_slots(name, slot, keys) {\n\tfor (const slot_key of Object.keys(slot)) {\n\t\tif (!~keys.indexOf(slot_key)) {\n\t\t\tconsole.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n\t\t}\n\t}\n}\n\n/**\n * @param {unknown} tag\n * @returns {void}\n */\nexport function validate_dynamic_element(tag) {\n\tconst is_string = typeof tag === 'string';\n\tif (tag && !is_string) {\n\t\tthrow new Error('<svelte:element> expects \"this\" attribute to be a string.');\n\t}\n}\n\n/**\n * @param {undefined | string} tag\n * @returns {void}\n */\nexport function validate_void_dynamic_element(tag) {\n\tif (tag && is_void(tag)) {\n\t\tconsole.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n\t}\n}\n\nexport function construct_svelte_component_dev(component, props) {\n\tconst error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n\ttry {\n\t\tconst instance = new component(props);\n\t\tif (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n\t\t\tthrow new Error(error_message);\n\t\t}\n\t\treturn instance;\n\t} catch (err) {\n\t\tconst { message } = err;\n\t\tif (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n\t\t\tthrow new Error(error_message);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n *\n * Can be used to create strongly typed Svelte components.\n *\n * #### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponent } from \"svelte\";\n * export class MyComponent extends SvelteComponent<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n * @template {Record<string, any>} [Slots=any]\n * @extends {SvelteComponent<Props, Events>}\n */\nexport class SvelteComponentDev extends SvelteComponent {\n\t/**\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t *\n\t * @type {Props}\n\t */\n\t$$prop_def;\n\t/**\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t *\n\t * @type {Events}\n\t */\n\t$$events_def;\n\t/**\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t *\n\t * @type {Slots}\n\t */\n\t$$slot_def;\n\n\t/** @param {import('./public.js').ComponentConstructorOptions<Props>} options */\n\tconstructor(options) {\n\t\tif (!options || (!options.target && !options.$$inline)) {\n\t\t\tthrow new Error(\"'target' is a required option\");\n\t\t}\n\t\tsuper();\n\t}\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tsuper.$destroy();\n\t\tthis.$destroy = () => {\n\t\t\tconsole.warn('Component was already destroyed'); // eslint-disable-line no-console\n\t\t};\n\t}\n\n\t/** @returns {void} */\n\t$capture_state() {}\n\n\t/** @returns {void} */\n\t$inject_state() {}\n}\n/**\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n * @template {Record<string, any>} [Slots=any]\n * @deprecated Use `SvelteComponent` instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512\n * @extends {SvelteComponentDev<Props, Events, Slots>}\n */\nexport class SvelteComponentTyped extends SvelteComponentDev {}\n\n/** @returns {() => void} */\nexport function loop_guard(timeout) {\n\tconst start = Date.now();\n\treturn () => {\n\t\tif (Date.now() - start > timeout) {\n\t\t\tthrow new Error('Infinite loop detected');\n\t\t}\n\t};\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n","import { BROWSER } from 'esm-env';\n\nconst param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/**\n * Creates the regex pattern, extracts parameter names, and generates types for a route\n * @param {string} id\n */\nexport function parse_route_id(id) {\n\t/** @type {import('types').RouteParam[]} */\n\tconst params = [];\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment) => {\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: rest_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: rest_match[2],\n\t\t\t\t\t\t\t\t\toptional: false,\n\t\t\t\t\t\t\t\t\trest: true,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case — /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: optional_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: optional_match[2],\n\t\t\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\t\t\trest: false,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('x+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(String.fromCharCode(parseInt(content.slice(2), 16)));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('u+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(\n\t\t\t\t\t\t\t\t\t\t\t\tString.fromCharCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t...content\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((code) => parseInt(code, 16))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// We know the match cannot be null in the browser because manifest generation\n\t\t\t\t\t\t\t\t\t\t// would have invoked this during build and failed if we hit an invalid\n\t\t\t\t\t\t\t\t\t\t// param/matcher name with non-alphanumeric character.\n\t\t\t\t\t\t\t\t\t\tconst match = /** @type {RegExpExecArray} */ (param_pattern.exec(content));\n\t\t\t\t\t\t\t\t\t\tif (!BROWSER && !match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, matcher] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\tmatcher,\n\t\t\t\t\t\t\t\t\t\t\toptional: !!is_optional,\n\t\t\t\t\t\t\t\t\t\t\trest: !!is_rest,\n\t\t\t\t\t\t\t\t\t\t\tchained: is_rest ? i === 1 && parts[0] === '' : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn escape(content);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}/?$`\n\t\t\t\t);\n\n\treturn { pattern, params };\n}\n\nconst optional_param_regex = /\\/\\[\\[\\w+?(?:=\\w+)?\\]\\]/;\n\n/**\n * Removes optional params from a route ID.\n * @param {string} id\n * @returns The route id with optional params removed\n */\nexport function remove_optional_params(id) {\n\treturn id.replace(optional_param_regex, '');\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {import('types').RouteParam[]} params\n * @param {Record<string, import('@sveltejs/kit').ParamMatcher>} matchers\n */\nexport function exec(match, params, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst result = {};\n\n\tconst values = match.slice(1);\n\tconst values_needing_match = values.filter((value) => value !== undefined);\n\n\tlet buffered = 0;\n\n\tfor (let i = 0; i < params.length; i += 1) {\n\t\tconst param = params[i];\n\t\tlet value = values[i - buffered];\n\n\t\t// in the `[[a=b]]/.../[...rest]` case, if one or more optional parameters\n\t\t// weren't matched, roll the skipped values into the rest\n\t\tif (param.chained && param.rest && buffered) {\n\t\t\tvalue = values\n\t\t\t\t.slice(i - buffered, i + 1)\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.join('/');\n\n\t\t\tbuffered = 0;\n\t\t}\n\n\t\t// if `value` is undefined, it means this is an optional or rest parameter\n\t\tif (value === undefined) {\n\t\t\tif (param.rest) result[param.name] = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!param.matcher || matchers[param.matcher](value)) {\n\t\t\tresult[param.name] = value;\n\n\t\t\t// Now that the params match, reset the buffer if the next param isn't the [...rest]\n\t\t\t// and the next value is defined, otherwise the buffer will cause us to skip values\n\t\t\tconst next_param = params[i + 1];\n\t\t\tconst next_value = values[i + 1];\n\t\t\tif (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\n\t\t\t// There are no more params and no more values, but all non-empty values have been matched\n\t\t\tif (\n\t\t\t\t!next_param &&\n\t\t\t\t!next_value &&\n\t\t\t\tObject.keys(result).length === values_needing_match.length\n\t\t\t) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// in the `/[[a=b]]/...` case, if the value didn't satisfy the matcher,\n\t\t// keep track of the number of skipped optional parameters and continue\n\t\tif (param.optional && param.chained) {\n\t\t\tbuffered++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// otherwise, if the matcher returns `false`, the route did not match\n\t\treturn;\n\t}\n\n\tif (buffered) return;\n\treturn result;\n}\n\n/** @param {string} str */\nfunction escape(str) {\n\treturn (\n\t\tstr\n\t\t\t.normalize()\n\t\t\t// escape [ and ] before escaping other characters, since they are used in the replacements\n\t\t\t.replace(/[[\\]]/g, '\\\\$&')\n\t\t\t// replace %, /, ? and # with their encoded versions because decode_pathname leaves them untouched\n\t\t\t.replace(/%/g, '%25')\n\t\t\t.replace(/\\//g, '%2[Ff]')\n\t\t\t.replace(/\\?/g, '%3[Ff]')\n\t\t\t.replace(/#/g, '%23')\n\t\t\t// escape characters that have special meaning in regex\n\t\t\t.replace(/[.*+?^${}()|\\\\]/g, '\\\\$&')\n\t);\n}\n\nconst basic_param_pattern = /\\[(\\[)?(\\.\\.\\.)?(\\w+?)(?:=(\\w+))?\\]\\]?/g;\n\n/**\n * Populate a route ID with params to resolve a pathname.\n * @example\n * ```js\n * resolveRoute(\n *   `/blog/[slug]/[...somethingElse]`,\n *   {\n *     slug: 'hello-world',\n *     somethingElse: 'something/else'\n *   }\n * ); // `/blog/hello-world/something/else`\n * ```\n * @param {string} id\n * @param {Record<string, string | undefined>} params\n * @returns {string}\n */\nexport function resolve_route(id, params) {\n\tconst segments = get_route_segments(id);\n\treturn (\n\t\t'/' +\n\t\tsegments\n\t\t\t.map((segment) =>\n\t\t\t\tsegment.replace(basic_param_pattern, (_, optional, rest, name) => {\n\t\t\t\t\tconst param_value = params[name];\n\n\t\t\t\t\t// This is nested so TS correctly narrows the type\n\t\t\t\t\tif (!param_value) {\n\t\t\t\t\t\tif (optional) return '';\n\t\t\t\t\t\tif (rest && param_value !== undefined) return '';\n\t\t\t\t\t\tthrow new Error(`Missing parameter '${name}' in route ${id}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (param_value.startsWith('/') || param_value.endsWith('/'))\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Parameter '${name}' in route ${id} cannot start or end with a slash -- this would cause an invalid route like foo//bar`\n\t\t\t\t\t\t);\n\t\t\t\t\treturn param_value;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.filter(Boolean)\n\t\t\t.join('/')\n\t);\n}\n\n/**\n * @param {import('types').SSRNode} node\n * @returns {boolean}\n */\nexport function has_server_load(node) {\n\treturn node.server?.load !== undefined || node.server?.trailingSlash !== undefined;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\t/** @type {import('types').CSRRoute} */\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n\n/**\n * @param {import('types').CSRRouteServer} input\n * @param {import('types').CSRPageNodeLoader[]} app_nodes Will be modified if a new node is loaded that's not already in the array\n * @returns {import('types').CSRRoute}\n */\nexport function parse_server_route({ nodes, id, leaf, layouts, errors }, app_nodes) {\n\treturn {\n\t\tid,\n\t\texec: () => ({}), // dummy function; exec already happened on the server\n\t\t// By writing to app_nodes only when a loader at that index is not already defined,\n\t\t// we ensure that loaders have referential equality when they load the same node.\n\t\t// Code elsewhere in client.js relies on this referential equality to determine\n\t\t// if a loader is different and should therefore (re-)run.\n\t\terrors: errors.map((n) => (n ? (app_nodes[n] ||= nodes[n]) : undefined)),\n\t\tlayouts: layouts.map((n) => (n ? [n[0], (app_nodes[n[1]] ||= nodes[n[1]])] : undefined)),\n\t\tleaf: [leaf[0], (app_nodes[leaf[1]] ||= nodes[leaf[1]])]\n\t};\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n * @param {(value: string) => any} parse\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get(key, parse = JSON.parse) {\n\ttry {\n\t\treturn parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n * @param {(value: any) => string} stringify\n */\nexport function set(key, value, stringify = JSON.stringify) {\n\tconst data = stringify(value);\n\ttry {\n\t\tsessionStorage[key] = data;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","/**\n * Base64 Encodes an arraybuffer\n * @param {ArrayBuffer} arraybuffer\n * @returns {string}\n */\nexport function encode64(arraybuffer) {\n  const dv = new DataView(arraybuffer);\n  let binaryString = \"\";\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    binaryString += String.fromCharCode(dv.getUint8(i));\n  }\n\n  return binaryToAscii(binaryString);\n}\n\n/**\n * Decodes a base64 string into an arraybuffer\n * @param {string} string\n * @returns {ArrayBuffer}\n */\nexport function decode64(string) {\n  const binaryString = asciiToBinary(string);\n  const arraybuffer = new ArrayBuffer(binaryString.length);\n  const dv = new DataView(arraybuffer);\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    dv.setUint8(i, binaryString.charCodeAt(i));\n  }\n\n  return arraybuffer;\n}\n\nconst KEY_STRING =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n/**\n * Substitute for atob since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/atob.js\n *\n * @param {string} data\n * @returns {string}\n */\nfunction asciiToBinary(data) {\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n\n  let output = \"\";\n  let buffer = 0;\n  let accumulatedBits = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    buffer <<= 6;\n    buffer |= KEY_STRING.indexOf(data[i]);\n    accumulatedBits += 6;\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n  }\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  return output;\n}\n\n/**\n * Substitute for btoa since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/btoa.js\n *\n * @param {string} str\n * @returns {string}\n */\nfunction binaryToAscii(str) {\n  let out = \"\";\n  for (let i = 0; i < str.length; i += 3) {\n    /** @type {[number, number, number, number]} */\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = str.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (str.charCodeAt(i) & 0x03) << 4;\n    if (str.length > i + 1) {\n      groupsOfSix[1] |= str.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (str.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (str.length > i + 2) {\n      groupsOfSix[2] |= str.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = str.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += KEY_STRING[groupsOfSix[j]];\n      }\n    }\n  }\n  return out;\n}\n","export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n","import { decode64 } from './base64.js';\nimport {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n          case \"Int8Array\":\n          case \"Uint8Array\":\n          case \"Uint8ClampedArray\":\n          case \"Int16Array\":\n          case \"Uint16Array\":\n          case \"Int32Array\":\n          case \"Uint32Array\":\n          case \"Float32Array\":\n          case \"Float64Array\":\n          case \"BigInt64Array\":\n          case \"BigUint64Array\": {\n            const TypedArrayConstructor = globalThis[type];\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            const typedArray = new TypedArrayConstructor(arraybuffer);\n            hydrated[index] = typedArray;\n            break;\n          }\n\n          case \"ArrayBuffer\": {\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            hydrated[index] = arraybuffer;\n            break;\n          }\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n","import { HttpError, SvelteKitError } from '@sveltejs/kit/internal';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {import('../exports/internal/index.js').Redirect | HttpError | SvelteKitError | Error} */ (\n\t\terror\n\t);\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_status(error) {\n\treturn error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_message(error) {\n\treturn error instanceof SvelteKitError ? error.text : 'Internal Error';\n}\n","const DATA_SUFFIX = '/__data.json';\nconst HTML_DATA_SUFFIX = '.html__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\tif (pathname.endsWith('.html')) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\tif (pathname.endsWith(HTML_DATA_SUFFIX)) {\n\t\treturn pathname.slice(0, -HTML_DATA_SUFFIX.length) + '.html';\n\t}\n\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n\nconst ROUTE_SUFFIX = '/__route.js';\n\n/**\n * @param {string} pathname\n * @returns {boolean}\n */\nexport function has_resolution_suffix(pathname) {\n\treturn pathname.endsWith(ROUTE_SUFFIX);\n}\n\n/**\n * Convert a regular URL to a route to send to SvelteKit's server-side route resolution endpoint\n * @param {string} pathname\n * @returns {string}\n */\nexport function add_resolution_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + ROUTE_SUFFIX;\n}\n\n/**\n * @param {string} pathname\n * @returns {string}\n */\nexport function strip_resolution_suffix(pathname) {\n\treturn pathname.slice(0, -ROUTE_SUFFIX.length);\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport * as svelte from 'svelte';\nimport { HttpError, Redirect, SvelteKitError } from '@sveltejs/kit/internal';\nconst { onMount, tick } = svelte;\n// Svelte 4 and under don't have `untrack`, so we have to fallback if `untrack` is not exported\nconst untrack = svelte.untrack ?? ((value) => value());\nimport {\n\tdecode_params,\n\tdecode_pathname,\n\tstrip_hash,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport { dev_fetch, initial_fetch, lock_fetch, subsequent_fetch, unlock_fetch } from './fetcher.js';\nimport { parse, parse_server_route } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tresolve_url,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\torigin,\n\tscroll_state,\n\tnotifiable_store,\n\tcreate_updated_store,\n\tload_css\n} from './utils.js';\nimport { base } from '__sveltekit/paths';\nimport * as devalue from 'devalue';\nimport {\n\tHISTORY_INDEX,\n\tNAVIGATION_INDEX,\n\tPRELOAD_PRIORITIES,\n\tSCROLL_KEY,\n\tSTATES_KEY,\n\tSNAPSHOT_KEY,\n\tPAGE_URL_KEY\n} from './constants.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { compact } from '../../utils/array.js';\nimport { INVALIDATED_PARAM, TRAILING_SLASH_PARAM, validate_depends } from '../shared.js';\nimport { get_message, get_status } from '../../utils/error.js';\nimport { writable } from 'svelte/store';\nimport { page, update, navigating } from './state.svelte.js';\nimport { add_data_suffix, add_resolution_suffix } from '../pathname.js';\n\nexport { load_css };\n\nconst ICON_REL_ATTRIBUTES = new Set(['icon', 'shortcut icon', 'apple-touch-icon']);\n\nlet errored = false;\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n/**\n * history index -> { x, y }\n * @type {Record<number, { x: number; y: number }>}\n */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/**\n * navigation index -> any\n * @type {Record<string, any[]>}\n */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\nif (DEV && BROWSER) {\n\tlet warned = false;\n\n\tconst current_module_url = import.meta.url.split('?')[0]; // remove query params that vite adds to the URL when it is loaded from node_modules\n\n\tconst warn = () => {\n\t\tif (warned) return;\n\n\t\t// Rather than saving a pointer to the original history methods, which would prevent monkeypatching by other libs,\n\t\t// inspect the stack trace to see if we're being called from within SvelteKit.\n\t\tlet stack = new Error().stack?.split('\\n');\n\t\tif (!stack) return;\n\t\tif (!stack[0].includes('https:') && !stack[0].includes('http:')) stack = stack.slice(1); // Chrome includes the error message in the stack\n\t\tstack = stack.slice(2); // remove `warn` and the place where `warn` was called\n\t\t// Can be falsy if was called directly from an anonymous function\n\t\tif (stack[0]?.includes(current_module_url)) return;\n\n\t\twarned = true;\n\n\t\tconsole.warn(\n\t\t\t\"Avoid using `history.pushState(...)` and `history.replaceState(...)` as these will conflict with SvelteKit's router. Use the `pushState` and `replaceState` imports from `$app/navigation` instead.\"\n\t\t);\n\t};\n\n\tconst push_state = history.pushState;\n\thistory.pushState = (...args) => {\n\t\twarn();\n\t\treturn push_state.apply(history, args);\n\t};\n\n\tconst replace_state = history.replaceState;\n\thistory.replaceState = (...args) => {\n\t\twarn();\n\t\treturn replace_state.apply(history, args);\n\t};\n}\n\nexport const stores = {\n\turl: /* @__PURE__ */ notifiable_store({}),\n\tpage: /* @__PURE__ */ notifiable_store({}),\n\tnavigating: /* @__PURE__ */ writable(\n\t\t/** @type {import('@sveltejs/kit').Navigation | null} */ (null)\n\t),\n\tupdated: /* @__PURE__ */ create_updated_store()\n};\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {number} current_history_index\n * @param {number} current_navigation_index\n */\nfunction clear_onward_history(current_history_index, current_navigation_index) {\n\t// if we navigated back, then pushed a new state, we can\n\t// release memory by pruning the scroll/snapshot lookup\n\tlet i = current_history_index + 1;\n\twhile (scroll_positions[i]) {\n\t\tdelete scroll_positions[i];\n\t\ti += 1;\n\t}\n\n\ti = current_navigation_index + 1;\n\twhile (snapshots[i]) {\n\t\tdelete snapshots[i];\n\t\ti += 1;\n\t}\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n */\nfunction native_navigation(url) {\n\tlocation.href = url.href;\n\treturn new Promise(() => {});\n}\n\n/**\n * Checks whether a service worker is registered, and if it is,\n * tries to update it.\n */\nasync function update_service_worker() {\n\tif ('serviceWorker' in navigator) {\n\t\tconst registration = await navigator.serviceWorker.getRegistration(base || '/');\n\t\tif (registration) {\n\t\t\tawait registration.update();\n\t\t}\n\t}\n}\n\nfunction noop() {}\n\n/** @type {import('types').CSRRoute[]} All routes of the app. Only available when kit.router.resolution=client */\nlet routes;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_layout_loader;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_error_loader;\n/** @type {HTMLElement} */\nlet container;\n/** @type {HTMLElement} */\nlet target;\n/** @type {import('./types.js').SvelteKitApp} */\nexport let app;\n\n/** @type {Array<((url: URL) => boolean)>} */\nconst invalidated = [];\n\n/**\n * An array of the `+layout.svelte` and `+page.svelte` component instances\n * that currently live on the page — used for capturing and restoring snapshots.\n * It's updated/manipulated through `bind:this` in `Root.svelte`.\n * @type {import('svelte').SvelteComponent[]}\n */\nconst components = [];\n\n/** @type {{id: string, token: {}, promise: Promise<import('./types.js').NavigationResult>} | null} */\nlet load_cache = null;\n\n/**\n * @type {Map<string, Promise<URL>>}\n * Cache for client-side rerouting, since it could contain async calls which we want to\n * avoid running multiple times which would slow down navigations (e.g. else preloading\n * wouldn't help because on navigation it would be called again). Since `reroute` should be\n * a pure function (i.e. always return the same) value it's safe to cache across navigations.\n * The server reroute calls don't need to be cached because they are called using `import(...)`\n * which is cached per the JS spec.\n */\nconst reroute_cache = new Map();\n\n/**\n * Note on before_navigate_callbacks, on_navigate_callbacks and after_navigate_callbacks:\n * do not re-assign as some closures keep references to these Sets\n */\n/** @type {Set<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\nconst before_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\nconst on_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\nconst after_navigate_callbacks = new Set();\n\n/** @type {import('./types.js').NavigationState} */\nlet current = {\n\tbranch: [],\n\terror: null,\n\t// @ts-ignore - we need the initial value to be null\n\turl: null\n};\n\n/** this being true means we SSR'd */\nlet hydrated = false;\nlet started = false;\nlet autoscroll = true;\nlet updating = false;\nlet is_navigating = false;\nlet hash_navigating = false;\n/** True as soon as there happened one client-side navigation (excluding the SvelteKit-initialized initial one when in SPA mode) */\nlet has_navigated = false;\n\nlet force_invalidation = false;\n\n/** @type {import('svelte').SvelteComponent} */\nlet root;\n\n/** @type {number} keeping track of the history index in order to prevent popstate navigation events if needed */\nlet current_history_index;\n\n/** @type {number} */\nlet current_navigation_index;\n\n/** @type {{}} */\nlet token;\n\n/**\n * A set of tokens which are associated to current preloads.\n * If a preload becomes a real navigation, it's removed from the set.\n * If a preload token is in the set and the preload errors, the error\n * handling logic (for example reloading) is skipped.\n */\nconst preload_tokens = new Set();\n\n/** @type {Promise<void> | null} */\nlet pending_invalidate;\n\n/**\n * @param {import('./types.js').SvelteKitApp} _app\n * @param {HTMLElement} _target\n * @param {Parameters<typeof _hydrate>[1]} [hydrate]\n */\nexport async function start(_app, _target, hydrate) {\n\tif (DEV && _target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\t// detect basic auth credentials in the current URL\n\t// https://github.com/sveltejs/kit/pull/11179\n\t// if so, refresh the page without credentials\n\tif (document.URL !== location.href) {\n\t\t// eslint-disable-next-line no-self-assign\n\t\tlocation.href = location.href;\n\t}\n\n\tapp = _app;\n\n\tawait _app.hooks.init?.();\n\n\troutes = __SVELTEKIT_CLIENT_ROUTING__ ? parse(_app) : [];\n\tcontainer = __SVELTEKIT_EMBEDDED__ ? _target : document.documentElement;\n\ttarget = _target;\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader = _app.nodes[0];\n\tdefault_error_loader = _app.nodes[1];\n\tvoid default_layout_loader();\n\tvoid default_error_loader();\n\n\tcurrent_history_index = history.state?.[HISTORY_INDEX];\n\tcurrent_navigation_index = history.state?.[NAVIGATION_INDEX];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = current_navigation_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{\n\t\t\t\t...history.state,\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tfunction restore_scroll() {\n\t\tif (scroll) {\n\t\t\thistory.scrollRestoration = 'manual';\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t}\n\t}\n\n\tif (hydrate) {\n\t\trestore_scroll();\n\n\t\tawait _hydrate(target, hydrate);\n\t} else {\n\t\tawait navigate({\n\t\t\ttype: 'enter',\n\t\t\turl: resolve_url(app.hash ? decode_hash(new URL(location.href)) : location.href),\n\t\t\treplace_state: true\n\t\t});\n\n\t\trestore_scroll();\n\t}\n\n\t_start_router();\n}\n\nasync function _invalidate() {\n\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t// is running because subsequent invalidations may make earlier ones outdated,\n\t// but batch multiple synchronous invalidations.\n\tawait (pending_invalidate ||= Promise.resolve());\n\tif (!pending_invalidate) return;\n\tpending_invalidate = null;\n\n\tconst nav_token = (token = {});\n\tconst intent = await get_navigation_intent(current.url, true);\n\n\t// Clear preload, it might be affected by the invalidation.\n\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t// was then triggered and is still running while the invalidation kicks in,\n\t// at which point the invalidation should take over and \"win\".\n\tload_cache = null;\n\n\tconst navigation_result = intent && (await load_route(intent));\n\tif (!navigation_result || nav_token !== token) return;\n\n\tif (navigation_result.type === 'redirect') {\n\t\treturn _goto(new URL(navigation_result.location, current.url).href, {}, 1, nav_token);\n\t}\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\tcurrent = navigation_result.state;\n\treset_invalidation();\n\troot.$set(navigation_result.props);\n\tupdate(navigation_result.props.page);\n}\n\nfunction reset_invalidation() {\n\tinvalidated.length = 0;\n\tforce_invalidation = false;\n}\n\n/** @param {number} index */\nfunction capture_snapshot(index) {\n\tif (components.some((c) => c?.snapshot)) {\n\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t}\n}\n\n/** @param {number} index */\nfunction restore_snapshot(index) {\n\tsnapshots[index]?.forEach((value, i) => {\n\t\tcomponents[i]?.snapshot?.restore(value);\n\t});\n}\n\nfunction persist_state() {\n\tupdate_scroll_positions(current_history_index);\n\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\tcapture_snapshot(current_navigation_index);\n\tstorage.set(SNAPSHOT_KEY, snapshots);\n}\n\n/**\n * @param {string | URL} url\n * @param {{ replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; invalidate?: Array<string | URL | ((url: URL) => boolean)>; state?: Record<string, any> }} options\n * @param {number} redirect_count\n * @param {{}} [nav_token]\n */\nasync function _goto(url, options, redirect_count, nav_token) {\n\treturn navigate({\n\t\ttype: 'goto',\n\t\turl: resolve_url(url),\n\t\tkeepfocus: options.keepFocus,\n\t\tnoscroll: options.noScroll,\n\t\treplace_state: options.replaceState,\n\t\tstate: options.state,\n\t\tredirect_count,\n\t\tnav_token,\n\t\taccept: () => {\n\t\t\tif (options.invalidateAll) {\n\t\t\t\tforce_invalidation = true;\n\t\t\t}\n\n\t\t\tif (options.invalidate) {\n\t\t\t\toptions.invalidate.forEach(push_invalidated);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @param {import('./types.js').NavigationIntent} intent */\nasync function _preload_data(intent) {\n\t// Reuse the existing pending preload if it's for the same navigation.\n\t// Prevents an edge case where same preload is triggered multiple times,\n\t// then a later one is becoming the real navigation and the preload tokens\n\t// get out of sync.\n\tif (intent.id !== load_cache?.id) {\n\t\tconst preload = {};\n\t\tpreload_tokens.add(preload);\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\ttoken: preload,\n\t\t\tpromise: load_route({ ...intent, preload }).then((result) => {\n\t\t\t\tpreload_tokens.delete(preload);\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\t}\n\n\treturn load_cache.promise;\n}\n\n/**\n * @param {URL} url\n * @returns {Promise<void>}\n */\nasync function _preload_code(url) {\n\tconst route = (await get_navigation_intent(url, false))?.route;\n\n\tif (route) {\n\t\tawait Promise.all([...route.layouts, route.leaf].map((load) => load?.[1]()));\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationFinished} result\n * @param {HTMLElement} target\n * @param {boolean} hydrate\n */\nfunction initialize(result, target, hydrate) {\n\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\tcurrent = result.state;\n\n\tconst style = document.querySelector('style[data-sveltekit]');\n\tif (style) style.remove();\n\n\tObject.assign(page, /** @type {import('@sveltejs/kit').Page} */ (result.props.page));\n\n\troot = new app.root({\n\t\ttarget,\n\t\tprops: { ...result.props, stores, components },\n\t\thydrate,\n\t\t// @ts-ignore Svelte 5 specific: asynchronously instantiate the component, i.e. don't call flushSync\n\t\tsync: false\n\t});\n\n\trestore_snapshot(current_navigation_index);\n\n\tif (hydrate) {\n\t\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t},\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter',\n\t\t\tcomplete: Promise.resolve()\n\t\t};\n\n\t\tafter_navigate_callbacks.forEach((fn) => fn(navigation));\n\t}\n\n\tstarted = true;\n}\n\n/**\n *\n * @param {{\n *   url: URL;\n *   params: Record<string, string>;\n *   branch: Array<import('./types.js').BranchNode | undefined>;\n *   status: number;\n *   error: App.Error | null;\n *   route: import('types').CSRRoute | null;\n *   form?: Record<string, any> | null;\n * }} opts\n */\nfunction get_navigation_result_from_branch({ url, params, branch, status, error, route, form }) {\n\t/** @type {import('types').TrailingSlash} */\n\tlet slash = 'never';\n\n\t// if `paths.base === '/a/b/c`, then the root route is always `/a/b/c/`, regardless of\n\t// the `trailingSlash` route option, so that relative paths to JS and CSS work\n\tif (base && (url.pathname === base || url.pathname === base + '/')) {\n\t\tslash = 'always';\n\t} else {\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t}\n\n\turl.pathname = normalize_path(url.pathname, slash);\n\t// eslint-disable-next-line no-self-assign\n\turl.search = url.search; // turn `/?` into `/`\n\n\t/** @type {import('./types.js').NavigationFinished} */\n\tconst result = {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\terror,\n\t\t\troute\n\t\t},\n\t\tprops: {\n\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component),\n\t\t\tpage: clone_page(page)\n\t\t}\n\t};\n\n\tif (form !== undefined) {\n\t\tresult.props.form = form;\n\t}\n\n\tlet data = {};\n\tlet data_changed = !page;\n\n\tlet p = 0;\n\n\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\tconst node = branch[i];\n\t\tconst prev = current.branch[i];\n\n\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\tif (!node) continue;\n\n\t\tdata = { ...data, ...node.data };\n\n\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\tif (data_changed) {\n\t\t\tresult.props[`data_${p}`] = data;\n\t\t}\n\n\t\tp += 1;\n\t}\n\n\tconst page_changed =\n\t\t!current.url ||\n\t\turl.href !== current.url.href ||\n\t\tcurrent.error !== error ||\n\t\t(form !== undefined && form !== page.form) ||\n\t\tdata_changed;\n\n\tif (page_changed) {\n\t\tresult.props.page = {\n\t\t\terror,\n\t\t\tparams,\n\t\t\troute: {\n\t\t\t\tid: route?.id ?? null\n\t\t\t},\n\t\t\tstate: {},\n\t\t\tstatus,\n\t\t\turl: new URL(url),\n\t\t\tform: form ?? null,\n\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\tdata: data_changed ? data : page.data\n\t\t};\n\t}\n\n\treturn result;\n}\n\n/**\n * Call the universal load function of the given node, if it exists.\n *\n * @param {{\n *   loader: import('types').CSRPageNodeLoader;\n * \t parent: () => Promise<Record<string, any>>;\n *   url: URL;\n *   params: Record<string, string>;\n *   route: { id: string | null };\n * \t server_data_node: import('./types.js').DataNode | null;\n * }} options\n * @returns {Promise<import('./types.js').BranchNode>}\n */\nasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t/** @type {Record<string, any> | null} */\n\tlet data = null;\n\n\tlet is_tracking = true;\n\n\t/** @type {import('types').Uses} */\n\tconst uses = {\n\t\tdependencies: new Set(),\n\t\tparams: new Set(),\n\t\tparent: false,\n\t\troute: false,\n\t\turl: false,\n\t\tsearch_params: new Set()\n\t};\n\n\tconst node = await loader();\n\n\tif (DEV) {\n\t\tvalidate_page_exports(node.universal);\n\n\t\tif (node.universal && app.hash) {\n\t\t\tconst options = Object.keys(node.universal).filter((o) => o !== 'load');\n\n\t\t\tif (options.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Page options are ignored when \\`router.type === 'hash'\\` (${route.id} has ${options\n\t\t\t\t\t\t.filter((o) => o !== 'load')\n\t\t\t\t\t\t.map((o) => `'${o}'`)\n\t\t\t\t\t\t.join(', ')})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (node.universal?.load) {\n\t\t/** @param {string[]} deps */\n\t\tfunction depends(...deps) {\n\t\t\tfor (const dep of deps) {\n\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\tuses.dependencies.add(href);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\tconst load_input = {\n\t\t\troute: new Proxy(route, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tparams: new Proxy(params, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdata: server_data_node?.data ?? null,\n\t\t\turl: make_trackable(\n\t\t\t\turl,\n\t\t\t\t() => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.url = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(param) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.search_params.add(param);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tapp.hash\n\t\t\t),\n\t\t\tasync fetch(resource, init) {\n\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\tinit = {\n\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t// the server sets headers to `undefined` if there are no headers but\n\t\t\t\t\t\t// the client defaults to an empty Headers object in the Request object.\n\t\t\t\t\t\t// To keep the two values in sync, we explicitly set the headers to `undefined`.\n\t\t\t\t\t\t// Also, not sure why, but sometimes 0 is evaluated as truthy so we need to\n\t\t\t\t\t\t// explicitly compare the headers length to a number here\n\t\t\t\t\t\theaders: [...resource.headers].length > 0 ? resource?.headers : undefined,\n\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t...init\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst { resolved, promise } = resolve_fetch_url(resource, init, url);\n\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tdepends(resolved.href);\n\t\t\t\t}\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\tsetHeaders: () => {}, // noop\n\t\t\tdepends,\n\t\t\tparent() {\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t}\n\t\t\t\treturn parent();\n\t\t\t},\n\t\t\tuntrack(fn) {\n\t\t\t\tis_tracking = false;\n\t\t\t\ttry {\n\t\t\t\t\treturn fn();\n\t\t\t\t} finally {\n\t\t\t\t\tis_tracking = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (DEV) {\n\t\t\ttry {\n\t\t\t\tlock_fetch();\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`a load function related to route '${route.id}' returned ${\n\t\t\t\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t\t\t\t? 'a Response object'\n\t\t\t\t\t\t\t\t\t: Array.isArray(data)\n\t\t\t\t\t\t\t\t\t\t? 'an array'\n\t\t\t\t\t\t\t\t\t\t: 'a non-plain object'\n\t\t\t\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tunlock_fetch();\n\t\t\t}\n\t\t} else {\n\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t}\n\t}\n\n\treturn {\n\t\tnode,\n\t\tloader,\n\t\tserver: server_data_node,\n\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\tdata: data ?? server_data_node?.data ?? null,\n\t\tslash: node.universal?.trailingSlash ?? server_data_node?.slash\n\t};\n}\n\n/**\n * @param {Request | string | URL} input\n * @param {RequestInit | undefined} init\n * @param {URL} url\n */\nfunction resolve_fetch_url(input, init, url) {\n\tlet requested = input instanceof Request ? input.url : input;\n\n\t// we must fixup relative urls so they are resolved from the target page\n\tconst resolved = new URL(requested, url);\n\n\t// match ssr serialized data url, which is important to find cached responses\n\tif (resolved.origin === url.origin) {\n\t\trequested = resolved.href.slice(url.origin.length);\n\t}\n\n\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\tconst promise = started\n\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t: initial_fetch(requested, init);\n\n\treturn { resolved, promise };\n}\n\n/**\n * @param {boolean} parent_changed\n * @param {boolean} route_changed\n * @param {boolean} url_changed\n * @param {Set<string>} search_params_changed\n * @param {import('types').Uses | undefined} uses\n * @param {Record<string, string>} params\n */\nfunction has_changed(\n\tparent_changed,\n\troute_changed,\n\turl_changed,\n\tsearch_params_changed,\n\tuses,\n\tparams\n) {\n\tif (force_invalidation) return true;\n\n\tif (!uses) return false;\n\n\tif (uses.parent && parent_changed) return true;\n\tif (uses.route && route_changed) return true;\n\tif (uses.url && url_changed) return true;\n\n\tfor (const tracked_params of uses.search_params) {\n\t\tif (search_params_changed.has(tracked_params)) return true;\n\t}\n\n\tfor (const param of uses.params) {\n\t\tif (params[param] !== current.params[param]) return true;\n\t}\n\n\tfor (const href of uses.dependencies) {\n\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n * @param {import('./types.js').DataNode | null} [previous]\n * @returns {import('./types.js').DataNode | null}\n */\nfunction create_data_node(node, previous) {\n\tif (node?.type === 'data') return node;\n\tif (node?.type === 'skip') return previous ?? null;\n\treturn null;\n}\n\n/**\n * @param {URL | null} old_url\n * @param {URL} new_url\n */\nfunction diff_search_params(old_url, new_url) {\n\tif (!old_url) return new Set(new_url.searchParams.keys());\n\n\tconst changed = new Set([...old_url.searchParams.keys(), ...new_url.searchParams.keys()]);\n\n\tfor (const key of changed) {\n\t\tconst old_values = old_url.searchParams.getAll(key);\n\t\tconst new_values = new_url.searchParams.getAll(key);\n\n\t\tif (\n\t\t\told_values.every((value) => new_values.includes(value)) &&\n\t\t\tnew_values.every((value) => old_values.includes(value))\n\t\t) {\n\t\t\tchanged.delete(key);\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n/**\n * @param {Omit<import('./types.js').NavigationFinished['state'], 'branch'> & { error: App.Error }} opts\n * @returns {import('./types.js').NavigationFinished}\n */\nfunction preload_error({ error, url, route, params }) {\n\treturn {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\terror,\n\t\t\turl,\n\t\t\troute,\n\t\t\tparams,\n\t\t\tbranch: []\n\t\t},\n\t\tprops: {\n\t\t\tpage: clone_page(page),\n\t\t\tconstructors: []\n\t\t}\n\t};\n}\n\n/**\n * @param {import('./types.js').NavigationIntent & { preload?: {} }} intent\n * @returns {Promise<import('./types.js').NavigationResult>}\n */\nasync function load_route({ id, invalidating, url, params, route, preload }) {\n\tif (load_cache?.id === id) {\n\t\t// the preload becomes the real navigation\n\t\tpreload_tokens.delete(load_cache.token);\n\t\treturn load_cache.promise;\n\t}\n\n\tconst { errors, layouts, leaf } = route;\n\n\tconst loaders = [...layouts, leaf];\n\n\t// preload modules to avoid waterfall, but handle rejections\n\t// so they don't get reported to Sentry et al (we don't need\n\t// to act on the failures at this point)\n\terrors.forEach((loader) => loader?.().catch(() => {}));\n\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\tlet server_data = null;\n\tconst url_changed = current.url ? id !== get_page_key(current.url) : false;\n\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\tconst search_params_changed = diff_search_params(current.url, url);\n\n\tlet parent_invalid = false;\n\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\tconst previous = current.branch[i];\n\n\t\tconst invalid =\n\t\t\t!!loader?.[0] &&\n\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\thas_changed(\n\t\t\t\t\tparent_invalid,\n\t\t\t\t\troute_changed,\n\t\t\t\t\turl_changed,\n\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\tparams\n\t\t\t\t));\n\n\t\tif (invalid) {\n\t\t\t// For the next one\n\t\t\tparent_invalid = true;\n\t\t}\n\n\t\treturn invalid;\n\t});\n\n\tif (invalid_server_nodes.some(Boolean)) {\n\t\ttry {\n\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t} catch (error) {\n\t\t\tconst handled_error = await handle_error(error, { url, params, route: { id } });\n\n\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\treturn preload_error({ error: handled_error, url, params, route });\n\t\t\t}\n\n\t\t\treturn load_root_error_page({\n\t\t\t\tstatus: get_status(error),\n\t\t\t\terror: handled_error,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\n\t\tif (server_data.type === 'redirect') {\n\t\t\treturn server_data;\n\t\t}\n\t}\n\n\tconst server_data_nodes = server_data?.nodes;\n\n\tlet parent_changed = false;\n\n\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\tif (!loader) return;\n\n\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\tconst previous = current.branch[i];\n\n\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t// re-use data from previous load if it's still valid\n\t\tconst valid =\n\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\tloader[1] === previous?.loader &&\n\t\t\t!has_changed(\n\t\t\t\tparent_changed,\n\t\t\t\troute_changed,\n\t\t\t\turl_changed,\n\t\t\t\tsearch_params_changed,\n\t\t\t\tprevious.universal?.uses,\n\t\t\t\tparams\n\t\t\t);\n\t\tif (valid) return previous;\n\n\t\tparent_changed = true;\n\n\t\tif (server_data_node?.type === 'error') {\n\t\t\t// rethrow and catch below\n\t\t\tthrow server_data_node;\n\t\t}\n\n\t\treturn load_node({\n\t\t\tloader: loader[1],\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: async () => {\n\t\t\t\tconst data = {};\n\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tserver_data_node: create_data_node(\n\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : (server_data_node ?? null),\n\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t)\n\t\t});\n\t});\n\n\t// if we don't do this, rejections will be unhandled\n\tfor (const p of branch_promises) p.catch(() => {});\n\n\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\tconst branch = [];\n\n\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\tif (loaders[i]) {\n\t\t\ttry {\n\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\t\treturn preload_error({\n\t\t\t\t\t\terror: await handle_error(err, { params, url, route: { id: route.id } }),\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet status = get_status(err);\n\t\t\t\t/** @type {App.Error} */\n\t\t\t\tlet error;\n\n\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\terror = err.body;\n\t\t\t\t} else {\n\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\t\t\t\tawait update_service_worker();\n\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t}\n\n\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t}\n\n\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\tif (error_load) {\n\t\t\t\t\treturn get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\tbranch.push(undefined);\n\t\t}\n\t}\n\n\treturn get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus: 200,\n\t\terror: null,\n\t\troute,\n\t\t// Reset `form` on navigation, but not invalidation\n\t\tform: invalidating ? undefined : null\n\t});\n}\n\n/**\n * @param {number} i Start index to backtrack from\n * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n */\nasync function load_nearest_error_page(i, branch, errors) {\n\twhile (i--) {\n\t\tif (errors[i]) {\n\t\t\tlet j = i;\n\t\t\twhile (!branch[j]) j -= 1;\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tidx: j + 1,\n\t\t\t\t\tnode: {\n\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} catch {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {{\n *   status: number;\n *   error: App.Error;\n *   url: URL;\n *   route: { id: string | null }\n * }} opts\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function load_root_error_page({ status, error, url, route }) {\n\t/** @type {Record<string, string>} */\n\tconst params = {}; // error page does not have params\n\n\t/** @type {import('types').ServerDataNode | null} */\n\tlet server_data_node = null;\n\n\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\tif (default_layout_has_server_load) {\n\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t// existing root layout data\n\t\ttry {\n\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\tif (\n\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t) {\n\t\t\t\tthrow 0;\n\t\t\t}\n\n\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t} catch {\n\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\t}\n\n\ttry {\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\treturn _goto(new URL(error.location, location.href), {}, 0);\n\t\t}\n\n\t\t// TODO: this falls back to the server when a server exists, but what about SPA mode?\n\t\tthrow error;\n\t}\n}\n\n/**\n * Resolve the relative rerouted URL for a client-side navigation\n * @param {URL} url\n * @returns {Promise<URL | undefined>}\n */\nasync function get_rerouted_url(url) {\n\tconst href = url.href;\n\n\tif (reroute_cache.has(href)) {\n\t\treturn reroute_cache.get(href);\n\t}\n\n\tlet rerouted;\n\n\ttry {\n\t\tconst promise = (async () => {\n\t\t\t// reroute could alter the given URL, so we pass a copy\n\t\t\tlet rerouted =\n\t\t\t\t(await app.hooks.reroute({\n\t\t\t\t\turl: new URL(url),\n\t\t\t\t\tfetch: async (input, init) => {\n\t\t\t\t\t\treturn resolve_fetch_url(input, init, url).promise;\n\t\t\t\t\t}\n\t\t\t\t})) ?? url;\n\n\t\t\tif (typeof rerouted === 'string') {\n\t\t\t\tconst tmp = new URL(url); // do not mutate the incoming URL\n\n\t\t\t\tif (app.hash) {\n\t\t\t\t\ttmp.hash = rerouted;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.pathname = rerouted;\n\t\t\t\t}\n\n\t\t\t\trerouted = tmp;\n\t\t\t}\n\n\t\t\treturn rerouted;\n\t\t})();\n\n\t\treroute_cache.set(href, promise);\n\t\trerouted = await promise;\n\t} catch (e) {\n\t\treroute_cache.delete(href);\n\t\tif (DEV) {\n\t\t\t// in development, print the error...\n\t\t\tconsole.error(e);\n\n\t\t\t// ...and pause execution, since otherwise we will immediately reload the page\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\t// fall back to native navigation\n\t\treturn;\n\t}\n\n\treturn rerouted;\n}\n\n/**\n * Resolve the full info (which route, params, etc.) for a client-side navigation from the URL,\n * taking the reroute hook into account. If this isn't a client-side-navigation (or the URL is undefined),\n * returns undefined.\n * @param {URL | undefined} url\n * @param {boolean} invalidating\n * @returns {Promise<import('./types.js').NavigationIntent | undefined>}\n */\nasync function get_navigation_intent(url, invalidating) {\n\tif (!url) return;\n\tif (is_external_url(url, base, app.hash)) return;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tconst rerouted = await get_rerouted_url(url);\n\t\tif (!rerouted) return;\n\n\t\tconst path = get_url_path(rerouted);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\treturn {\n\t\t\t\t\tid: get_page_key(url),\n\t\t\t\t\tinvalidating,\n\t\t\t\t\troute,\n\t\t\t\t\tparams: decode_params(params),\n\t\t\t\t\turl\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/** @type {{ route?: import('types').CSRRouteServer, params: Record<string, string>}} */\n\t\tconst { route, params } = await import(\n\t\t\t/* @vite-ignore */\n\t\t\tadd_resolution_suffix(url.pathname)\n\t\t);\n\n\t\tif (!route) return;\n\n\t\treturn {\n\t\t\tid: get_page_key(url),\n\t\t\tinvalidating,\n\t\t\troute: parse_server_route(route, app.nodes),\n\t\t\tparams,\n\t\t\turl\n\t\t};\n\t}\n}\n\n/** @param {URL} url */\nfunction get_url_path(url) {\n\treturn (\n\t\tdecode_pathname(\n\t\t\tapp.hash ? url.hash.replace(/^#/, '').replace(/[?#].+/, '') : url.pathname.slice(base.length)\n\t\t) || '/'\n\t);\n}\n\n/** @param {URL} url */\nfunction get_page_key(url) {\n\treturn (app.hash ? url.hash.replace(/^#/, '') : url.pathname) + url.search;\n}\n\n/**\n * @param {{\n *   url: URL;\n *   type: import('@sveltejs/kit').Navigation[\"type\"];\n *   intent?: import('./types.js').NavigationIntent;\n *   delta?: number;\n * }} opts\n */\nfunction _before_navigate({ url, type, intent, delta }) {\n\tlet should_block = false;\n\n\tconst nav = create_navigation(current, intent, url, type);\n\n\tif (delta !== undefined) {\n\t\tnav.navigation.delta = delta;\n\t}\n\n\tconst cancellable = {\n\t\t...nav.navigation,\n\t\tcancel: () => {\n\t\t\tshould_block = true;\n\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t}\n\t};\n\n\tif (!is_navigating) {\n\t\t// Don't run the event during redirects\n\t\tbefore_navigate_callbacks.forEach((fn) => fn(cancellable));\n\t}\n\n\treturn should_block ? null : nav;\n}\n\n/**\n * @param {{\n *   type: import('@sveltejs/kit').NavigationType;\n *   url: URL;\n *   popped?: {\n *     state: Record<string, any>;\n *     scroll: { x: number, y: number };\n *     delta: number;\n *   };\n *   keepfocus?: boolean;\n *   noscroll?: boolean;\n *   replace_state?: boolean;\n *   state?: Record<string, any>;\n *   redirect_count?: number;\n *   nav_token?: {};\n *   accept?: () => void;\n *   block?: () => void;\n * }} opts\n */\nasync function navigate({\n\ttype,\n\turl,\n\tpopped,\n\tkeepfocus,\n\tnoscroll,\n\treplace_state,\n\tstate = {},\n\tredirect_count = 0,\n\tnav_token = {},\n\taccept = noop,\n\tblock = noop\n}) {\n\tconst prev_token = token;\n\ttoken = nav_token;\n\n\tconst intent = await get_navigation_intent(url, false);\n\tconst nav =\n\t\ttype === 'enter'\n\t\t\t? create_navigation(current, intent, url, type)\n\t\t\t: _before_navigate({ url, type, delta: popped?.delta, intent });\n\n\tif (!nav) {\n\t\tblock();\n\t\tif (token === nav_token) token = prev_token;\n\t\treturn;\n\t}\n\n\t// store this before calling `accept()`, which may change the index\n\tconst previous_history_index = current_history_index;\n\tconst previous_navigation_index = current_navigation_index;\n\n\taccept();\n\n\tis_navigating = true;\n\n\tif (started && nav.navigation.type !== 'enter') {\n\t\tstores.navigating.set((navigating.current = nav.navigation));\n\t}\n\n\tlet navigation_result = intent && (await load_route(intent));\n\n\tif (!navigation_result) {\n\t\tif (is_external_url(url, base, app.hash)) {\n\t\t\tif (DEV && app.hash) {\n\t\t\t\t// Special case for hash mode during DEV: If someone accidentally forgets to use a hash for the link,\n\t\t\t\t// they would end up here in an endless loop. Fall back to error page in that case\n\t\t\t\tnavigation_result = await server_fallback(\n\t\t\t\t\turl,\n\t\t\t\t\t{ id: null },\n\t\t\t\t\tawait handle_error(\n\t\t\t\t\t\tnew SvelteKitError(\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t'Not Found',\n\t\t\t\t\t\t\t`Not found: ${url.pathname} (did you forget the hash?)`\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\t404\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn await native_navigation(url);\n\t\t\t}\n\t\t} else {\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new SvelteKitError(404, 'Not Found', `Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\t}\n\n\t// if this is an internal navigation intent, use the normalized\n\t// URL for the rest of the function\n\turl = intent?.url || url;\n\n\t// abort if user navigated during update\n\tif (token !== nav_token) {\n\t\tnav.reject(new Error('navigation aborted'));\n\t\treturn false;\n\t}\n\n\tif (navigation_result.type === 'redirect') {\n\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\tif (redirect_count >= 20) {\n\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\tstatus: 500,\n\t\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\turl,\n\t\t\t\troute: { id: null }\n\t\t\t});\n\t\t} else {\n\t\t\tawait _goto(new URL(navigation_result.location, url).href, {}, redirect_count + 1, nav_token);\n\t\t\treturn false;\n\t\t}\n\t} else if (/** @type {number} */ (navigation_result.props.page.status) >= 400) {\n\t\tconst updated = await stores.updated.check();\n\t\tif (updated) {\n\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\tawait update_service_worker();\n\t\t\tawait native_navigation(url);\n\t\t}\n\t}\n\n\t// reset invalidation only after a finished navigation. If there are redirects or\n\t// additional invalidations, they should get the same invalidation treatment\n\treset_invalidation();\n\n\tupdating = true;\n\n\tupdate_scroll_positions(previous_history_index);\n\tcapture_snapshot(previous_navigation_index);\n\n\t// ensure the url pathname matches the page's trailing slash option\n\tif (navigation_result.props.page.url.pathname !== url.pathname) {\n\t\turl.pathname = navigation_result.props.page.url.pathname;\n\t}\n\n\tstate = popped ? popped.state : state;\n\n\tif (!popped) {\n\t\t// this is a new navigation, rather than a popstate\n\t\tconst change = replace_state ? 0 : 1;\n\n\t\tconst entry = {\n\t\t\t[HISTORY_INDEX]: (current_history_index += change),\n\t\t\t[NAVIGATION_INDEX]: (current_navigation_index += change),\n\t\t\t[STATES_KEY]: state\n\t\t};\n\n\t\tconst fn = replace_state ? history.replaceState : history.pushState;\n\t\tfn.call(history, entry, '', url);\n\n\t\tif (!replace_state) {\n\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t}\n\t}\n\n\t// reset preload synchronously after the history state has been set to avoid race conditions\n\tload_cache = null;\n\n\tnavigation_result.props.page.state = state;\n\n\tif (started) {\n\t\tconst after_navigate = (\n\t\t\tawait Promise.all(\n\t\t\t\tArray.from(on_navigate_callbacks, (fn) =>\n\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t)\n\t\t\t)\n\t\t).filter(/** @returns {value is () => void} */ (value) => typeof value === 'function');\n\n\t\tif (after_navigate.length > 0) {\n\t\t\tfunction cleanup() {\n\t\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\t\tafter_navigate_callbacks.delete(fn);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tafter_navigate.push(cleanup);\n\n\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\tafter_navigate_callbacks.add(fn);\n\t\t\t});\n\t\t}\n\n\t\tcurrent = navigation_result.state;\n\n\t\t// reset url before updating page store\n\t\tif (navigation_result.props.page) {\n\t\t\tnavigation_result.props.page.url = url;\n\t\t}\n\n\t\troot.$set(navigation_result.props);\n\t\tupdate(navigation_result.props.page);\n\t\thas_navigated = true;\n\t} else {\n\t\tinitialize(navigation_result, target, false);\n\t}\n\n\tconst { activeElement } = document;\n\n\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\tawait tick();\n\n\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\tconst scroll = popped ? popped.scroll : noscroll ? scroll_state() : null;\n\n\tif (autoscroll) {\n\t\tconst deep_linked = url.hash && document.getElementById(get_id(url));\n\t\tif (scroll) {\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t} else if (deep_linked) {\n\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t// CSS properties.\n\t\t\tdeep_linked.scrollIntoView();\n\t\t} else {\n\t\t\tscrollTo(0, 0);\n\t\t}\n\t}\n\n\tconst changed_focus =\n\t\t// reset focus only if any manual focus management didn't override it\n\t\tdocument.activeElement !== activeElement &&\n\t\t// also refocus when activeElement is body already because the\n\t\t// focus event might not have been fired on it yet\n\t\tdocument.activeElement !== document.body;\n\n\tif (!keepfocus && !changed_focus) {\n\t\treset_focus(url);\n\t}\n\n\tautoscroll = true;\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\n\tis_navigating = false;\n\n\tif (type === 'popstate') {\n\t\trestore_snapshot(current_navigation_index);\n\t}\n\n\tnav.fulfil(undefined);\n\n\tafter_navigate_callbacks.forEach((fn) =>\n\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t);\n\n\tstores.navigating.set((navigating.current = null));\n\n\tupdating = false;\n}\n\n/**\n * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n * @param {URL} url\n * @param {{ id: string | null }} route\n * @param {App.Error} error\n * @param {number} status\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function server_fallback(url, route, error, status) {\n\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t// which means no SSR, which means we would end up in an endless loop\n\t\treturn await load_root_error_page({\n\t\t\tstatus,\n\t\t\terror,\n\t\t\turl,\n\t\t\troute\n\t\t});\n\t}\n\n\tif (DEV && status !== 404) {\n\t\tconsole.error(\n\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t);\n\n\t\tdebugger; // eslint-disable-line\n\t}\n\n\treturn await native_navigation(url);\n}\n\nif (import.meta.hot) {\n\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\tif (current.error) location.reload();\n\t});\n}\n\n/** @typedef {(typeof PRELOAD_PRIORITIES)['hover'] | (typeof PRELOAD_PRIORITIES)['tap']} PreloadDataPriority */\n\nfunction setup_preload() {\n\t/** @type {NodeJS.Timeout} */\n\tlet mousemove_timeout;\n\t/** @type {Element} */\n\tlet current_a;\n\t/** @type {PreloadDataPriority} */\n\tlet current_priority;\n\n\tcontainer.addEventListener('mousemove', (event) => {\n\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\tclearTimeout(mousemove_timeout);\n\t\tmousemove_timeout = setTimeout(() => {\n\t\t\tvoid preload(target, PRELOAD_PRIORITIES.hover);\n\t\t}, 20);\n\t});\n\n\t/** @param {Event} event */\n\tfunction tap(event) {\n\t\tif (event.defaultPrevented) return;\n\t\tvoid preload(/** @type {Element} */ (event.composedPath()[0]), PRELOAD_PRIORITIES.tap);\n\t}\n\n\tcontainer.addEventListener('mousedown', tap);\n\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\tconst observer = new IntersectionObserver(\n\t\t(entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tvoid _preload_code(new URL(/** @type {HTMLAnchorElement} */ (entry.target).href));\n\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{ threshold: 0 }\n\t);\n\n\t/**\n\t * @param {Element} element\n\t * @param {PreloadDataPriority} priority\n\t */\n\tasync function preload(element, priority) {\n\t\tconst a = find_anchor(element, container);\n\n\t\t// we don't want to preload data again if the user has already hovered/tapped\n\t\tconst interacted = a === current_a && priority >= current_priority;\n\t\tif (!a || interacted) return;\n\n\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\tif (external || download) return;\n\n\t\tconst options = get_router_options(a);\n\n\t\t// we don't want to preload data for a page we're already on\n\t\tconst same_url = url && get_page_key(current.url) === get_page_key(url);\n\t\tif (options.reload || same_url) return;\n\n\t\tif (priority <= options.preload_data) {\n\t\t\tcurrent_a = a;\n\t\t\t// we don't want to preload data again on tap if we've already preloaded it on hover\n\t\t\tcurrent_priority = PRELOAD_PRIORITIES.tap;\n\n\t\t\tconst intent = await get_navigation_intent(url, false);\n\t\t\tif (!intent) return;\n\n\t\t\tif (DEV) {\n\t\t\t\tvoid _preload_data(intent).then((result) => {\n\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t'See https://svelte.dev/docs/kit/link-options for more info'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvoid _preload_data(intent);\n\t\t\t}\n\t\t} else if (priority <= options.preload_code) {\n\t\t\tcurrent_a = a;\n\t\t\tcurrent_priority = priority;\n\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t}\n\t}\n\n\tfunction after_navigate() {\n\t\tobserver.disconnect();\n\n\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\t\tif (external || download) continue;\n\n\t\t\tconst options = get_router_options(a);\n\t\t\tif (options.reload) continue;\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\tobserver.observe(a);\n\t\t\t}\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t\t}\n\t\t}\n\t}\n\n\tafter_navigate_callbacks.add(after_navigate);\n\tafter_navigate();\n}\n\n/**\n * @param {unknown} error\n * @param {import('@sveltejs/kit').NavigationEvent} event\n * @returns {import('types').MaybePromise<App.Error>}\n */\nfunction handle_error(error, event) {\n\tif (error instanceof HttpError) {\n\t\treturn error.body;\n\t}\n\n\tif (DEV) {\n\t\terrored = true;\n\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t}\n\n\tconst status = get_status(error);\n\tconst message = get_message(error);\n\n\treturn (\n\t\tapp.hooks.handleError({ error, event, status, message }) ?? /** @type {any} */ ({ message })\n\t);\n}\n\n/**\n * @template {Function} T\n * @param {Set<T>} callbacks\n * @param {T} callback\n */\nfunction add_navigation_callback(callbacks, callback) {\n\tonMount(() => {\n\t\tcallbacks.add(callback);\n\n\t\treturn () => {\n\t\t\tcallbacks.delete(callback);\n\t\t};\n\t});\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport function afterNavigate(callback) {\n\tadd_navigation_callback(after_navigate_callbacks, callback);\n}\n\n/**\n * A navigation interceptor that triggers before we navigate to a URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n *\n * Calling `cancel()` will prevent the navigation from completing. If `navigation.type === 'leave'` — meaning the user is navigating away from the app (or closing the tab) — calling `cancel` will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response.\n *\n * When a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), `navigation.to.route.id` will be `null`.\n *\n * If the navigation will (if not cancelled) cause the document to unload — in other words `'leave'` navigations and `'link'` navigations where `navigation.to.route === null` — `navigation.willUnload` is `true`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport function beforeNavigate(callback) {\n\tadd_navigation_callback(before_navigate_callbacks, callback);\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL except during full-page navigations.\n *\n * If you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n *\n * If a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n *\n * `onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>} callback\n * @returns {void}\n */\nexport function onNavigate(callback) {\n\tadd_navigation_callback(on_navigate_callbacks, callback);\n}\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport function disableScrollHandling() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call disableScrollHandling() on the server');\n\t}\n\n\tif (DEV && started && !updating) {\n\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t}\n\n\tif (updating || !started) {\n\t\tautoscroll = false;\n\t}\n}\n\n/**\n * Allows you to navigate programmatically to a given route, with options such as keeping the current element focused.\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n *\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://svelte.dev/docs/kit/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [opts.invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://svelte.dev/docs/kit/load#rerunning-load-functions for more info on invalidation.\n * @param {Array<string | URL | ((url: URL) => boolean)>} [opts.invalidate] Causes any load functions to re-run if they depend on one of the urls\n * @param {App.PageState} [opts.state] An optional object that will be available as `page.state`\n * @returns {Promise<void>}\n */\nexport function goto(url, opts = {}) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call goto(...) on the server');\n\t}\n\n\turl = new URL(resolve_url(url));\n\n\tif (url.origin !== origin) {\n\t\treturn Promise.reject(\n\t\t\tnew Error(\n\t\t\t\tDEV\n\t\t\t\t\t? `Cannot use \\`goto\\` with an external URL. Use \\`window.location = \"${url}\"\\` instead`\n\t\t\t\t\t: 'goto: invalid URL'\n\t\t\t)\n\t\t);\n\t}\n\n\treturn _goto(url, opts, 0);\n}\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n * @returns {Promise<void>}\n */\nexport function invalidate(resource) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidate(...) on the server');\n\t}\n\n\tpush_invalidated(resource);\n\n\treturn _invalidate();\n}\n\n/**\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n */\nfunction push_invalidated(resource) {\n\tif (typeof resource === 'function') {\n\t\tinvalidated.push(resource);\n\t} else {\n\t\tconst { href } = new URL(resource, location.href);\n\t\tinvalidated.push((url) => url.href === href);\n\t}\n}\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @returns {Promise<void>}\n */\nexport function invalidateAll() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidateAll() on the server');\n\t}\n\n\tforce_invalidation = true;\n\treturn _invalidate();\n}\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves with the result of running the new route's `load` functions once the preload is complete.\n *\n * @param {string} href Page to preload\n * @returns {Promise<{ type: 'loaded'; status: number; data: Record<string, any> } | { type: 'redirect'; location: string }>}\n */\nexport async function preloadData(href) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadData(...) on the server');\n\t}\n\n\tconst url = resolve_url(href);\n\tconst intent = await get_navigation_intent(url, false);\n\n\tif (!intent) {\n\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t}\n\n\tconst result = await _preload_data(intent);\n\tif (result.type === 'redirect') {\n\t\treturn {\n\t\t\ttype: result.type,\n\t\t\tlocation: result.location\n\t\t};\n\t}\n\n\tconst { status, data } = result.props.page ?? page;\n\treturn { type: result.type, status, data };\n}\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @param {string} pathname\n * @returns {Promise<void>}\n */\nexport async function preloadCode(pathname) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadCode(...) on the server');\n\t}\n\n\tconst url = new URL(pathname, current.url);\n\n\tif (DEV) {\n\t\tif (!pathname.startsWith('/')) {\n\t\t\tthrow new Error(\n\t\t\t\t'argument passed to preloadCode must be a pathname (i.e. \"/about\" rather than \"http://example.com/about\"'\n\t\t\t);\n\t\t}\n\n\t\tif (!pathname.startsWith(base)) {\n\t\t\tthrow new Error(\n\t\t\t\t`pathname passed to preloadCode must start with \\`paths.base\\` (i.e. \"${base}${pathname}\" rather than \"${pathname}\")`\n\t\t\t);\n\t\t}\n\n\t\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\t\tconst rerouted = await get_rerouted_url(url);\n\t\t\tif (!rerouted || !routes.find((route) => route.exec(get_url_path(rerouted)))) {\n\t\t\t\tthrow new Error(`'${pathname}' did not match any routes`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _preload_code(url);\n}\n\n/**\n * Programmatically create a new history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function pushState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call pushState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call pushState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tupdate_scroll_positions(current_history_index);\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: (current_history_index += 1),\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.pushState(opts, '', resolve_url(url));\n\thas_navigated = true;\n\n\tpage.state = state;\n\troot.$set({\n\t\t// we need to assign a new page object so that subscribers are correctly notified\n\t\tpage: untrack(() => clone_page(page))\n\t});\n\n\tclear_onward_history(current_history_index, current_navigation_index);\n}\n\n/**\n * Programmatically replace the current history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function replaceState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call replaceState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call replaceState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: current_history_index,\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.replaceState(opts, '', resolve_url(url));\n\n\tpage.state = state;\n\troot.$set({\n\t\tpage: untrack(() => clone_page(page))\n\t});\n}\n\n/**\n * This action updates the `form` property of the current page with the given data and updates `page.status`.\n * In case of an error, it redirects to the nearest error page.\n * @template {Record<string, unknown> | undefined} Success\n * @template {Record<string, unknown> | undefined} Failure\n * @param {import('@sveltejs/kit').ActionResult<Success, Failure>} result\n * @returns {Promise<void>}\n */\nexport async function applyAction(result) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call applyAction(...) on the server');\n\t}\n\n\tif (result.type === 'error') {\n\t\tconst url = new URL(location.href);\n\n\t\tconst { branch, route } = current;\n\t\tif (!route) return;\n\n\t\tconst error_load = await load_nearest_error_page(current.branch.length, branch, route.errors);\n\t\tif (error_load) {\n\t\t\tconst navigation_result = get_navigation_result_from_branch({\n\t\t\t\turl,\n\t\t\t\tparams: current.params,\n\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\tstatus: result.status ?? 500,\n\t\t\t\terror: result.error,\n\t\t\t\troute\n\t\t\t});\n\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\troot.$set(navigation_result.props);\n\t\t\tupdate(navigation_result.props.page);\n\n\t\t\tvoid tick().then(() => reset_focus(current.url));\n\t\t}\n\t} else if (result.type === 'redirect') {\n\t\tawait _goto(result.location, { invalidateAll: true }, 0);\n\t} else {\n\t\tpage.form = result.data;\n\t\tpage.status = result.status;\n\n\t\t/** @type {Record<string, any>} */\n\t\troot.$set({\n\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t// after use:enhance reset the form....\n\t\t\tform: null,\n\t\t\tpage: clone_page(page)\n\t\t});\n\n\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\tawait tick();\n\t\troot.$set({ form: result.data });\n\n\t\tif (result.type === 'success') {\n\t\t\treset_focus(page.url);\n\t\t}\n\t}\n}\n\nfunction _start_router() {\n\thistory.scrollRestoration = 'manual';\n\n\t// Adopted from Nuxt.js\n\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t// and back-navigation from other pages to use the browser to restore the\n\t// scrolling position.\n\taddEventListener('beforeunload', (e) => {\n\t\tlet should_block = false;\n\n\t\tpersist_state();\n\n\t\tif (!is_navigating) {\n\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\tconst navigation = {\n\t\t\t\t...nav.navigation,\n\t\t\t\tcancel: () => {\n\t\t\t\t\tshould_block = true;\n\t\t\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbefore_navigate_callbacks.forEach((fn) => fn(navigation));\n\t\t}\n\n\t\tif (should_block) {\n\t\t\te.preventDefault();\n\t\t\te.returnValue = '';\n\t\t} else {\n\t\t\thistory.scrollRestoration = 'auto';\n\t\t}\n\t});\n\n\taddEventListener('visibilitychange', () => {\n\t\tif (document.visibilityState === 'hidden') {\n\t\t\tpersist_state();\n\t\t}\n\t});\n\n\t// @ts-expect-error this isn't supported everywhere yet\n\tif (!navigator.connection?.saveData) {\n\t\tsetup_preload();\n\t}\n\n\t/** @param {MouseEvent} event */\n\tcontainer.addEventListener('click', async (event) => {\n\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\tif (event.button || event.which !== 1) return;\n\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\tif (!a) return;\n\n\t\tconst { url, external, target, download } = get_link_info(a, base, app.hash);\n\t\tif (!url) return;\n\n\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\tif (target === '_parent' || target === '_top') {\n\t\t\tif (window.parent !== window) return;\n\t\t} else if (target && target !== '_self') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = get_router_options(a);\n\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t// See:\n\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\tif (\n\t\t\t!is_svg_a_element &&\n\t\t\turl.protocol !== location.protocol &&\n\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t)\n\t\t\treturn;\n\n\t\tif (download) return;\n\n\t\tconst [nonhash, hash] = (app.hash ? url.hash.replace(/^#/, '') : url.href).split('#');\n\t\tconst same_pathname = nonhash === strip_hash(location);\n\n\t\t// Ignore the following but fire beforeNavigate\n\t\tif (external || (options.reload && (!same_pathname || !hash))) {\n\t\t\tif (_before_navigate({ url, type: 'link' })) {\n\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t// being called when the page unloads\n\t\t\t\tis_navigating = true;\n\t\t\t} else {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t// This will ensure the `hashchange` event is fired\n\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\tif (hash !== undefined && same_pathname) {\n\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t// history state value without any signal that we can detect.\n\t\t\tconst [, current_hash] = current.url.href.split('#');\n\t\t\tif (current_hash === hash) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// We're already on /# and click on a link that goes to /#, or we're on\n\t\t\t\t// /#top and click on a link that goes to /#top. In those cases just go to\n\t\t\t\t// the top of the page, and avoid a history change.\n\t\t\t\tif (hash === '' || (hash === 'top' && a.ownerDocument.getElementById('top') === null)) {\n\t\t\t\t\twindow.scrollTo({ top: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconst element = a.ownerDocument.getElementById(decodeURIComponent(hash));\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\telement.scrollIntoView();\n\t\t\t\t\t\telement.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\thash_navigating = true;\n\n\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\tupdate_url(url);\n\n\t\t\tif (!options.replace_state) return;\n\n\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\thash_navigating = false;\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// allow the browser to repaint before navigating —\n\t\t// this prevents INP scores being penalised\n\t\tawait new Promise((fulfil) => {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tsetTimeout(fulfil, 0);\n\t\t\t});\n\n\t\t\tsetTimeout(fulfil, 100); // fallback for edge case where rAF doesn't fire because e.g. tab was backgrounded\n\t\t});\n\n\t\tawait navigate({\n\t\t\ttype: 'link',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\tcontainer.addEventListener('submit', (event) => {\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t);\n\n\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (event.submitter);\n\n\t\tconst target = submitter?.formTarget || form.target;\n\n\t\tif (target === '_blank') return;\n\n\t\tconst method = submitter?.formMethod || form.method;\n\n\t\tif (method !== 'get') return;\n\n\t\t// It is impossible to use form actions with hash router, so we just ignore handling them here\n\t\tconst url = new URL(\n\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t);\n\n\t\tif (is_external_url(url, base, false)) return;\n\n\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\tconst options = get_router_options(event_form);\n\t\tif (options.reload) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tconst data = new FormData(event_form);\n\n\t\tconst submitter_name = submitter?.getAttribute('name');\n\t\tif (submitter_name) {\n\t\t\tdata.append(submitter_name, submitter?.getAttribute('value') ?? '');\n\t\t}\n\n\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\turl.search = new URLSearchParams(data).toString();\n\n\t\tvoid navigate({\n\t\t\ttype: 'form',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\taddEventListener('popstate', async (event) => {\n\t\tif (resetting_focus) return;\n\n\t\tif (event.state?.[HISTORY_INDEX]) {\n\t\t\tconst history_index = event.state[HISTORY_INDEX];\n\t\t\ttoken = {};\n\n\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\tif (history_index === current_history_index) return;\n\n\t\t\tconst scroll = scroll_positions[history_index];\n\t\t\tconst state = event.state[STATES_KEY] ?? {};\n\t\t\tconst url = new URL(event.state[PAGE_URL_KEY] ?? location.href);\n\t\t\tconst navigation_index = event.state[NAVIGATION_INDEX];\n\t\t\tconst is_hash_change = current.url ? strip_hash(location) === strip_hash(current.url) : false;\n\t\t\tconst shallow =\n\t\t\t\tnavigation_index === current_navigation_index && (has_navigated || is_hash_change);\n\n\t\t\tif (shallow) {\n\t\t\t\t// We don't need to navigate, we just need to update scroll and/or state.\n\t\t\t\t// This happens with hash links and `pushState`/`replaceState`. The\n\t\t\t\t// exception is if we haven't navigated yet, since we could have\n\t\t\t\t// got here after a modal navigation then a reload\n\t\t\t\tif (state !== page.state) {\n\t\t\t\t\tpage.state = state;\n\t\t\t\t}\n\n\t\t\t\tupdate_url(url);\n\n\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\tif (scroll) scrollTo(scroll.x, scroll.y);\n\n\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta = history_index - current_history_index;\n\n\t\t\tawait navigate({\n\t\t\t\ttype: 'popstate',\n\t\t\t\turl,\n\t\t\t\tpopped: {\n\t\t\t\t\tstate,\n\t\t\t\t\tscroll,\n\t\t\t\t\tdelta\n\t\t\t\t},\n\t\t\t\taccept: () => {\n\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\tcurrent_navigation_index = navigation_index;\n\t\t\t\t},\n\t\t\t\tblock: () => {\n\t\t\t\t\thistory.go(-delta);\n\t\t\t\t},\n\t\t\t\tnav_token: token\n\t\t\t});\n\t\t} else {\n\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\tif (!hash_navigating) {\n\t\t\t\tconst url = new URL(location.href);\n\t\t\t\tupdate_url(url);\n\n\t\t\t\t// if the user edits the hash via the browser URL bar, trigger a full-page\n\t\t\t\t// reload to align with pathname router behavior\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.reload();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\taddEventListener('hashchange', () => {\n\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t// we need to update history, otherwise we have to leave it alone\n\t\tif (hash_navigating) {\n\t\t\thash_navigating = false;\n\t\t\thistory.replaceState(\n\t\t\t\t{\n\t\t\t\t\t...history.state,\n\t\t\t\t\t[HISTORY_INDEX]: ++current_history_index,\n\t\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t\t},\n\t\t\t\t'',\n\t\t\t\tlocation.href\n\t\t\t);\n\t\t}\n\t});\n\n\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\tfor (const link of document.querySelectorAll('link')) {\n\t\tif (ICON_REL_ATTRIBUTES.has(link.rel)) {\n\t\t\tlink.href = link.href; // eslint-disable-line\n\t\t}\n\t}\n\n\taddEventListener('pageshow', (event) => {\n\t\t// If the user navigates to another site and then uses the back button and\n\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t// the navigation away from it was successful.\n\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\tif (event.persisted) {\n\t\t\tstores.navigating.set((navigating.current = null));\n\t\t}\n\t});\n\n\t/**\n\t * @param {URL} url\n\t */\n\tfunction update_url(url) {\n\t\tcurrent.url = page.url = url;\n\t\tstores.page.set(clone_page(page));\n\t\tstores.page.notify();\n\t}\n}\n\n/**\n * @param {HTMLElement} target\n * @param {import('./types.js').HydrateOptions} opts\n */\nasync function _hydrate(\n\ttarget,\n\t{ status = 200, error, node_ids, params, route, server_route, data: server_data_nodes, form }\n) {\n\thydrated = true;\n\n\tconst url = new URL(location.href);\n\n\t/** @type {import('types').CSRRoute | undefined} */\n\tlet parsed_route;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t// of determining the params on the client side.\n\t\t\t({ params = {}, route = { id: null } } = (await get_navigation_intent(url, false)) || {});\n\t\t}\n\n\t\tparsed_route = routes.find(({ id }) => id === route.id);\n\t} else {\n\t\t// undefined in case of 404\n\t\tif (server_route) {\n\t\t\tparsed_route = route = parse_server_route(server_route, app.nodes);\n\t\t} else {\n\t\t\troute = { id: null };\n\t\t\tparams = {};\n\t\t}\n\t}\n\n\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\tlet result;\n\tlet hydrate = true;\n\n\ttry {\n\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\tif (server_data_node?.uses) {\n\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: app.nodes[n],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t});\n\t\t});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t// so that error boundaries can be lined up correctly\n\t\tif (parsed_route) {\n\t\t\tconst layouts = parsed_route.layouts;\n\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresult = get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus,\n\t\t\terror,\n\t\t\tform,\n\t\t\troute: parsed_route ?? null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t// a redirect but only in the browser\n\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\treturn;\n\t\t}\n\n\t\tresult = await load_root_error_page({\n\t\t\tstatus: get_status(error),\n\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\turl,\n\t\t\troute\n\t\t});\n\n\t\ttarget.textContent = '';\n\t\thydrate = false;\n\t}\n\n\tif (result.props.page) {\n\t\tresult.props.page.state = {};\n\t}\n\n\tinitialize(result, target, hydrate);\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\t// use window.fetch directly to allow using a 3rd party-patched fetch implementation\n\tconst fetcher = DEV ? dev_fetch : window.fetch;\n\tconst res = await fetcher(data_url.href, {});\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\t// if `__data.json` doesn't exist or the server has an internal error,\n\t\t// avoid parsing the HTML error page as a JSON\n\t\t/** @type {string | undefined} */\n\t\tlet message;\n\t\tif (res.headers.get('content-type')?.includes('application/json')) {\n\t\t\tmessage = await res.json();\n\t\t} else if (res.status === 404) {\n\t\t\tmessage = 'Not Found';\n\t\t} else if (res.status === 500) {\n\t\t\tmessage = 'Internal Error';\n\t\t}\n\t\tthrow new HttpError(res.status, message);\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\t\tconst decoder = new TextDecoder();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\t...app.decoders,\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : decoder.decode(value, { stream: true }); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url,\n\t\tsearch_params: new Set(uses?.search_params ?? [])\n\t};\n}\n\n/**\n * This flag is used to avoid client-side navigation when we're only using\n * `location.replace()` to set focus.\n */\nlet resetting_focus = false;\n\n/**\n * @param {URL} url\n */\nfunction reset_focus(url) {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\n\t\t// Mimic the browsers' behaviour and set the sequential focus navigation\n\t\t// starting point to the fragment identifier.\n\t\tconst id = get_id(url);\n\t\tif (id && document.getElementById(id)) {\n\t\t\tconst { x, y } = scroll_state();\n\n\t\t\t// `element.focus()` doesn't work on Safari and Firefox Ubuntu so we need\n\t\t\t// to use this hack with `location.replace()` instead.\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst history_state = history.state;\n\n\t\t\t\tresetting_focus = true;\n\t\t\t\tlocation.replace(`#${id}`);\n\n\t\t\t\t// if we're using hash routing, we need to restore the original hash after\n\t\t\t\t// setting the focus with `location.replace()`. Although we're calling\n\t\t\t\t// `location.replace()` again, the focus won't shift to the new hash\n\t\t\t\t// unless there's an element with the ID `/pathname#hash`, etc.\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.replace(url.hash);\n\t\t\t\t}\n\n\t\t\t\t// but Firefox has a bug that sets the history state to `null` so we\n\t\t\t\t// need to restore it after.\n\t\t\t\t// See https://bugzilla.mozilla.org/show_bug.cgi?id=1199924\n\t\t\t\thistory.replaceState(history_state, '', url.hash);\n\n\t\t\t\t// Scroll management has already happened earlier so we need to restore\n\t\t\t\t// the scroll position after setting the sequential focus navigation starting point\n\t\t\t\tscrollTo(x, y);\n\t\t\t\tresetting_focus = false;\n\t\t\t});\n\t\t} else {\n\t\t\t// If the ID doesn't exist, we try to mimic browsers' behaviour as closely\n\t\t\t// as possible by targeting the first scrollable region. Unfortunately, it's\n\t\t\t// not a perfect match — e.g. shift-tabbing won't immediately cycle up from\n\t\t\t// the end of the page on Chromium\n\t\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\t\tconst root = document.body;\n\t\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\t\troot.tabIndex = -1;\n\t\t\t// @ts-expect-error options.focusVisible is only supported in Firefox\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#browser_compatibility\n\t\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\t\tif (tabindex !== null) {\n\t\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t\t} else {\n\t\t\t\troot.removeAttribute('tabindex');\n\t\t\t}\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @template {import('@sveltejs/kit').NavigationType} T\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {T} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {Omit<import('@sveltejs/kit').Navigation, 'type'> & { type: T }} */\n\tconst navigation = {\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t};\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\n/**\n * TODO: remove this in 3.0 when the page store is also removed\n *\n * We need to assign a new page object so that subscribers are correctly notified.\n * However, spreading `{ ...page }` returns an empty object so we manually\n * assign to each property instead.\n *\n * @param {import('@sveltejs/kit').Page} page\n */\nfunction clone_page(page) {\n\treturn {\n\t\tdata: page.data,\n\t\terror: page.error,\n\t\tform: page.form,\n\t\tparams: page.params,\n\t\troute: page.route,\n\t\tstate: page.state,\n\t\tstatus: page.status,\n\t\turl: page.url\n\t};\n}\n\n/**\n * @param {URL} url\n * @returns {URL}\n */\nfunction decode_hash(url) {\n\tconst new_url = new URL(url);\n\t// Safari, for some reason, does change # to %23, when entered through the address bar\n\tnew_url.hash = decodeURIComponent(url.hash);\n\treturn new_url;\n}\n\n/**\n * @param {URL} url\n * @returns {string}\n */\nfunction get_id(url) {\n\tlet id;\n\n\tif (app.hash) {\n\t\tconst [, , second] = url.hash.split('#', 3);\n\t\tid = second ?? '';\n\t} else {\n\t\tid = url.hash.slice(1);\n\t}\n\n\treturn decodeURIComponent(id);\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":["SvelteComponentDev","SvelteComponent","options","__publicField","SvelteComponentTyped","HttpError","status","body","Redirect","location","SvelteKitError","text","message","param_pattern","parse_route_id","id","params","get_route_segments","segment","rest_match","optional_match","parts","content","i","escape","code","match","is_optional","is_rest","name","matcher","affects_path","route","exec","matchers","result","values","values_needing_match","value","buffered","param","s","next_param","next_value","str","parse","nodes","server_loads","dictionary","layouts_with_server_load","leaf","layouts","errors","pattern","path","n","create_layout_loader","create_leaf_loader","uses_server_data","get","key","set","stringify","data","decode64","string","binaryString","asciiToBinary","arraybuffer","dv","KEY_STRING","output","buffer","accumulatedBits","UNDEFINED","HOLE","NAN","POSITIVE_INFINITY","NEGATIVE_INFINITY","NEGATIVE_ZERO","unflatten","parsed","revivers","hydrate","hydrated","index","standalone","type","reviver","map","obj","TypedArrayConstructor","base64","typedArray","array","object","compact","arr","val","INVALIDATED_PARAM","TRAILING_SLASH_PARAM","get_status","error","get_message","DATA_SUFFIX","HTML_DATA_SUFFIX","add_data_suffix","pathname","tick","svelte","ICON_REL_ATTRIBUTES","scroll_positions","storage.get","SCROLL_KEY","snapshots","SNAPSHOT_KEY","stores","notifiable_store","writable","create_updated_store","update_scroll_positions","scroll_state","clear_onward_history","current_history_index","current_navigation_index","native_navigation","url","update_service_worker","registration","base","noop","routes","default_layout_loader","default_error_loader","container","target","app","invalidated","components","load_cache","reroute_cache","before_navigate_callbacks","on_navigate_callbacks","after_navigate_callbacks","current","started","autoscroll","is_navigating","hash_navigating","has_navigated","force_invalidation","root","token","preload_tokens","start","_app","_target","_b","_a","_c","HISTORY_INDEX","_d","NAVIGATION_INDEX","scroll","restore_scroll","_hydrate","navigate","resolve_url","decode_hash","_start_router","reset_invalidation","capture_snapshot","c","restore_snapshot","persist_state","storage.set","_goto","redirect_count","nav_token","push_invalidated","_preload_data","intent","preload","load_route","_preload_code","get_navigation_intent","load","initialize","style","page","navigation","fn","get_navigation_result_from_branch","branch","form","slash","node","normalize_path","branch_node","clone_page","data_changed","p","prev","load_node","loader","parent","server_data_node","is_tracking","uses","depends","deps","dep","href","load_input","make_trackable","resource","init","resolved","promise","resolve_fetch_url","input","requested","subsequent_fetch","initial_fetch","has_changed","parent_changed","route_changed","url_changed","search_params_changed","tracked_params","create_data_node","previous","diff_search_params","old_url","new_url","changed","old_values","new_values","preload_error","invalidating","loaders","server_data","get_page_key","parent_invalid","invalid_server_nodes","invalid","load_data","handled_error","handle_error","load_root_error_page","server_data_nodes","branch_promises","j","err","error_load","load_nearest_error_page","server_fallback","origin","root_layout","root_error","get_rerouted_url","rerouted","tmp","is_external_url","get_url_path","decode_params","decode_pathname","_before_navigate","delta","should_block","nav","create_navigation","cancellable","popped","keepfocus","noscroll","replace_state","state","accept","block","prev_token","previous_history_index","previous_navigation_index","navigating","navigation_result","change","entry","STATES_KEY","after_navigate","cleanup","update","activeElement","deep_linked","get_id","changed_focus","reset_focus","setup_preload","mousemove_timeout","current_a","current_priority","event","PRELOAD_PRIORITIES","tap","observer","entries","element","priority","a","find_anchor","interacted","external","download","get_link_info","get_router_options","same_url","nonhash","hash","same_pathname","strip_hash","current_hash","update_url","fulfil","submitter","event_form","submitter_name","resetting_focus","history_index","PAGE_URL_KEY","navigation_index","is_hash_change","link","node_ids","server_route","parsed_route","deserialize_uses","data_url","fetcher","res","resolve","deferreds","reader","decoder","deserialize","devalue.unflatten","reject","done","split","deferred","autofocus","x","y","history_state","tabindex","selection","ranges","b","complete","f","r","second"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}